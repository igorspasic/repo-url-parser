// generated by: https://github.com/igr/gradle-template
// template: maven-java:v1.0.0

plugins {
    id 'io.codearte.nexus-staging' version '0.11.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'io.codearte.nexus-staging'

group = 'com.oblac'
version = '1.0.2'

sourceCompatibility = 1.7
targetCompatibility = 1.7

rootProject.description = 'Repositories URL parser; supports Github and Github Enterprise.'

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "standardOut", "passed", "skipped", "failed"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

//
// MAVEN
//

ext.admin = hasProperty('sonatypeUsername')

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { admin }
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            customizePom(pom, rootProject)

            artifact sourcesJar
            artifact javadocJar

            if (admin) {
                // sign the pom
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                    pomFile.delete()
                }

                // sign the artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc|jre9)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            if (admin) {
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}

model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publish {
        dependsOn(project.tasks.build)
    }
    tasks.install {
        dependsOn(project.tasks.build)
    }
}


def customizePom(pom, gradleProject) {
    pom.withXml {
        def root = asNode()

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'Repo URL parser'
            description gradleProject.description
            url 'https://githu.com/igr/repo-url-parser'
            organization {
                name 'Oblac'
                url 'https://oblac.com'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/igr/repo-url-parser/issues'
            }
            licenses {
                license {
                    name 'The New BSD License'
                    url 'https://github.com/igr/repo-url-parser/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/igr/repo-url-parser'
                connection 'scm:git:git://github.com/igr/repo-url-parser.git'
                developerConnection 'scm:git:ssh://git@github.com/igr/repo-url-parser.git'
            }
            developers {
                developer {
                    id 'igor'
                    name 'Igor SpasiÄ‡'
                    email 'igor@jodd.org'
                    timezone '+1'
                }
            }
        }
    }
}

task install(dependsOn: publishToMavenLocal) {
    group = 'Publishing'
    description = 'Installs artifacts to local Maven repository'
}

//
// RELEASE
//

task release() {
    group 'Project'
    description 'Builds everything for the release.'

    dependsOn build
    dependsOn javadoc
    dependsOn jacocoTestReport
}

//
// WRAPPER
//

task wrapper(type: Wrapper) {
	gradleVersion = '4.6'
}